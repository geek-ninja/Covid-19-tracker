{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","className","Card","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f69225a0.chunk.js","sourcesContent":["import React from 'react'\nimport './infoBox.css'\nimport { Card, CardContent, Typography } from '@material-ui/core'\n\nfunction InfoBox({title,cases,isRed,active,total, ...props}) {\n    return (\n        <div className = 'infoBox'>\n            <Card onClick = {props.onClick} className = {`infoBox ${active && 'infoBox-selected'} ${isRed && 'infoBox-red'}`}>\n                <CardContent>\n                    <Typography className = 'infoBox_title' color = 'textSecondary'>{title}</Typography>\n                    <h2 className = {`infoBox_cases ${!isRed && 'infoBox_cases-green'}`}>{cases}</h2>\n                    <Typography className = 'infoBox_total' color = 'textSecondary'>{total} Total</Typography>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default InfoBox\n","import React from 'react'\nimport numeral from 'numeral'\nimport {Circle,Popup} from 'react-leaflet'\n\nconst casesTypeColors = {\n    cases:{\n        hex:'#CC1034',\n        multiplier:800\n    },\n    recovered:{\n        hex:'#7dd71d',\n        multiplier:1200\n    },\n    deaths:{\n        hex:'#fb4443',\n        multiplier:2000\n    }\n}\n\nexport const sortData = (data) => {\n    const sortedData = [...data]\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1))\n}\n\nexport const prettyPrintStat = (stat) => (stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\")\n\nexport const showDataOnMap = (data,casesType = 'cases') => (\n    data.map(country => (\n        <Circle center = {[country.countryInfo.lat,country.countryInfo.long]} fillOpacity = {0.4} color = {casesTypeColors[casesType].hex} fillColor = {casesTypeColors[casesType].hex} radius = {Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier}>\n            <Popup>\n                <div className = 'info-container'>\n                    <div className = 'info-flag' style = {{backgroundImage:`url(${country.countryInfo.flag})`}}/>\n                    <div className = 'info-name'>{country.country}</div>\n                    <div className = 'info-confirmed'><strong>Cases:</strong> {numeral(country.cases).format('0,0')}</div>\n                    <div className = 'info-recovered'><strong>recovered:</strong> {numeral(country.recovered).format('0,0')}</div>\n                    <div className = 'info-deaths'><strong>recovered:</strong> {numeral(country.deaths).format('0,0')}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n)","import React from 'react'\nimport {Map as LeafletMap,TileLayer} from 'react-leaflet'\nimport './Map.css'\nimport { showDataOnMap } from './util'\n\nfunction Map({countries ,casesType , center,zoom}) {\n    return (\n        <div className = 'map'>\n            <LeafletMap center = {center} zoom = {zoom}>\n                <TileLayer url = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' attribution = '&copy; <a href = \"http://osm.org/copyright\">OpenStreetMap</a> contributors'/>\n                {showDataOnMap(countries,casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport './table.css'\nimport numeral from 'numeral'\n\nfunction Table({countries}) {\n    return (\n        <div className = 'table'>\n            {countries.map(({country,cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td><strong>{numeral(cases).format('0,0')}</strong></td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react'\nimport {Line} from 'react-chartjs-2'\nimport numeral from 'numeral'\n\nconst options = {\n    legend:{display:false},elements:{point:{radius:0}},maintainAspectRatio:false,\n    tooltips:{\n        mode:'index',\n        intersect:false,\n        callbacks:{\n            label:function (tooltipItem,data){\n                return numeral(tooltipItem.value).format(\"+0,0\")\n            }\n        }\n    },\n    scales:{\n        xAxes : [{type:'time',time:{format:'MM/DD/YY',tooltipFormat:'ll'}}],\n        yAxes : [{gridLines:{display:false},ticks:{callback:function (value,index,values){return numeral(value).format(\"0a\")}}}]\n    }\n}\n\nfunction LineGraph( {casesType = 'cases', ...props}) {\n    const [data,setData] = useState({})\n    const buildChartData = (data,casesType = 'cases') => {\n        let chartData = []\n        let lastDataPoint\n\n        for( let date in data.cases) {\n            if(lastDataPoint){\n                const newDataPoint = {\n                    x: date,\n                    y: data[casesType][date] - lastDataPoint\n                }\n                chartData.push(newDataPoint)\n            }\n            lastDataPoint = data[casesType][date]\n        }\n        return chartData\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120').then(response => response.json()).then(data => {\n                let chartData = buildChartData(data,casesType)\n                setData(chartData)\n            })\n        }\n        fetchData()\n    }, [casesType])\n\n    return (\n        <div className = {props.className}>\n            {data?.length > 0 && (\n                <Line options = {options} data = {{\n                    datasets: [{data: data,backgroundColor: 'rgba(204,16,52,0.5)',borderColor: '#CC1034'}]\n                }}/>\n            )}\n        </div>\n    )\n}\n\nexport default LineGraph\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport { FormControl, Select, MenuItem, Card, CardContent} from '@material-ui/core'\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport {sortData, prettyPrintStat} from './util'\nimport LineGraph from './LineGraph'\nimport \"leaflet/dist/leaflet.css\"\n\nfunction App() {\n\n  const [countries,setCountries] = useState([])\n  const [country,setCountry] = useState('worldwide') \n  const [countryInfo,setCountryInfo] = useState({})\n  const [tableData,setTableData] = useState([])\n  const [mapCenter,setMapCenter] = useState({lat: 34.80746,lng: -40.4796})\n  const [mapZoom,setMapZoom] = useState(3)\n  const [mapCountries,setMapCountries] = useState([])\n  const [casesType,setCasesType] = useState('cases')\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all').then(response => response.json()).then(data => {\n      setCountryInfo(data)\n    })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries').then((response) => response.json()).then((data => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ))\n        const sortedData = sortData(data)\n        setTableData(sortedData)\n        setMapCountries(data)\n        setCountries(countries)\n      }))\n    }\n    getCountriesData()\n  }, [])\n  \n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value\n    setCountry(countryCode)\n    \n    const url = countryCode ==='worldwide' ? 'https://disease.sh/v3/covid-19/all': `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url).then(response => response.json()).then(data => {\n      setCountry(countryCode)\n      setCountryInfo(data)\n      setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n      setMapZoom(4)\n    })\n  }\n\n  return (\n    <div className=\"app\">\n      <div className = 'app_left'>\n        <div className = 'app_header'>\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className = 'app_dropdown'>\n            <Select variant = 'outlined' onChange = {onCountryChange} value = {country}>\n              <MenuItem value = 'worldwide'>WorldWide</MenuItem>\n              {\n                countries.map( (country) => (\n                <MenuItem value = {country.value}>{country.name}</MenuItem>\n                ))\n              }\n              {/* <MenuItem value = 'worldwide'>Worldwide</MenuItem>\n              <MenuItem value = 'worldwide'>Worldwide</MenuItem>\n              <MenuItem value = 'worldwide'>Worldwide</MenuItem>\n              <MenuItem value = 'worldwide'>Worldwide</MenuItem> */}\n            </Select>\n          </FormControl>\n        </div>\n        <div className = 'app_stats'>\n          <InfoBox isRed active = {casesType === 'cases'} title = 'CoronaVirus Cases' cases = {prettyPrintStat(countryInfo.todayCases)} total = {countryInfo.cases} onClick = {(e) => setCasesType('cases')}/>\n          <InfoBox active = {casesType === 'recovered'} title = 'Recovered' cases = {prettyPrintStat(countryInfo.todayRecovered)} total = {countryInfo.recovered} onClick = {(e) => setCasesType('recovered')}/>\n          <InfoBox isRed active = {casesType === 'deaths'} title = 'Deaths' cases = {prettyPrintStat(countryInfo.todayDeaths)} total = {countryInfo.deaths} onClick = {(e) => setCasesType('deaths')}/>\n        </div>\n        <Map className = 'app_map' casesType = {casesType} countries = {mapCountries} center = {mapCenter} zoom = {mapZoom}/>\n      </div>\n      <Card className = 'app_right'>\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries = {tableData}/>\n          <h3 className = 'graph_title'>WorldWide new {casesType}</h3>\n          <LineGraph className = 'app_graph' casesType = {casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}